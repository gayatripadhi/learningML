#install the necessary packages
install.packages("forecast")
install.packages("tseries")
install.packages("plotly")

#import the libraries after installing
library(forecast) 
library(tseries)
library(plotly)

setwd("G:/")	#Set the directory

data<-read.csv("Tractor-Sales.csv")	#Load the dataset and read it

timeseries_data<-as.ts(data)	#Assign the data as time series

timeseries_data<-ts(data,start=c(2003,1),end=c(2014,12),frequency=12)	#Allot the start and end dates of the time series and how would we like to get the data,i.e,yearly(frequency=1),monthyly(frequency=12) or daywise(frequency=365)

summary(timeseries_data)	#summary of the data

detrending<-diff(timeseries_data)	#To build a time series model,we have to first stationize its mean and variance.This is done by methods like detrending and differencing
 
fitdata_AR<-auto.arima(detrending,D=1)		#Fit the detrended data into the ARIMA model

print(fitdata_AR)	

#Series: detrending 
#ARIMA(2,0,1)(0,1,0)[12] 

#Coefficients:
#         ar1     ar2      ma1
#      0.5985  0.1967  -0.9817
#s.e.  0.0889  0.0881   0.0287

#sigma^2 estimated as 288.1:  log likelihood=-555.9
#AIC=1119.81   AICc=1120.13   BIC=1131.31

forecast_data<-forecast(fitdata_AR,h=60,level=c(80,95))	#Forecast the time series model for 12*5years=60 months

print(forecast_data)
#
         Point Forecast      Lo 80        Hi 80       Lo 95        Hi 95
Jan 2015     -39.911841  -61.66545  -18.1582335  -73.181112   -6.6425695
Feb 2015      -3.750306  -27.04545   19.5448412  -39.377158   31.8765470
Mar 2015      68.158611   44.85271   91.4645105   32.515313  103.8019085
Apr 2015     123.939187  100.54216  147.3362136   88.156522  159.7218514
May 2015      83.789954   60.35262  107.2272861   47.945648  119.6342602
Jun 2015     -43.342514  -66.81200  -19.8730333  -79.235988   -7.4490405
Jul 2015     122.548856   99.05786  146.0398515   86.622478  158.4752334
Aug 2015     -22.542210  -46.04833    0.9639096  -58.491718   13.4072978
Sep 2015    -207.618076 -231.13468 -184.1014685 -243.583624 -171.6525284
Oct 2015     -58.681391  -82.20530  -35.1574805  -94.658107  -22.7046747
Nov 2015     -61.734204  -85.26319  -38.2052143  -97.718688  -25.7497196
Dec 2015      86.221736   62.68921  109.7542603   50.231846  122.2116262
Jan 2016     -39.726861  -71.54367   -7.9100526  -88.386470    8.9327483
Feb 2016      -3.595989  -36.55908   29.3671017  -54.008686   46.8167079
Mar 2016      68.287347   35.31072  101.2639740   17.853948  118.7207458
Apr 2016     124.046583   90.99257  157.1005979   73.494829  174.5983365
May 2016      83.879548   50.78974  116.9693582   33.273049  134.4860459
Jun 2016     -43.267772  -76.38575  -10.1497995  -93.917341    7.3817964
Jul 2016     122.611208   89.47431  155.7481087   71.932692  173.2897243
Aug 2016     -22.490194  -55.64039   10.6600016  -73.189043   28.2086551
Sep 2016    -207.574682 -240.73410 -174.4152628 -258.287638 -156.8617264
Oct 2016     -58.645190  -91.81103  -25.4793477 -109.367969   -7.9224113
Nov 2016     -61.704004  -94.87431  -28.5336936 -112.433617  -10.9743918
Dec 2016      86.246930   53.07351  119.4203497   35.512562  136.9812976
Jan 2017     -39.705843  -79.16913   -0.2425571 -100.059732   20.6480447
Feb 2017      -3.578456  -43.97850   36.8215930  -65.364998   58.2080868
Mar 2017      68.301974   27.89024  108.7137059    6.497564  130.1063845
Apr 2017     124.058785   83.58262  164.5349515   62.155831  185.9617395
May 2017      83.889727   43.38361  124.3958461   21.940964  145.8384902
Jun 2017     -43.259280  -83.78894   -2.7296228 -105.244042   18.7254819
Jul 2017     122.618293   82.07281  163.1637798   60.609321  184.6272643
Aug 2017     -22.484284  -63.04089   18.0723229  -84.510261   39.5416936
Sep 2017    -207.569752 -248.13407 -167.0054294 -269.607529 -145.5319743
Oct 2017     -58.641077  -99.21077  -18.0713815 -120.687072    3.4049179
Nov 2017     -61.700573 -102.27401  -21.1271394 -123.752285    0.3511388
Dec 2017      86.249792   45.67376  126.8258270   24.194102  148.3054824
Jan 2018     -39.703455  -85.56305    6.1561344 -109.839646   30.4327349
Feb 2018      -3.576464  -50.24528   43.0923521  -74.950258   67.7973308
Mar 2018      68.303636   21.62464  114.9826297   -3.085724  139.6929962
Apr 2018     124.060172   77.32526  170.7950843   52.585291  195.5350526
May 2018      83.890884   37.12996  130.6518111   12.376217  155.4055508
Jun 2018     -43.258315  -90.03969    3.5230559 -114.804249   28.2876179
Jul 2018     122.619098   75.82398  169.4142197   51.052134  194.1860610
Aug 2018     -22.483612  -69.28839   24.3211697  -94.065349   49.0981246
Sep 2018    -207.569192 -254.38068 -160.7577064 -279.161180 -135.9772030
Oct 2018     -58.640609 -105.45676  -11.8244562 -130.239737   12.9585184
Nov 2018     -61.700183 -108.51958  -14.8807818 -133.304278    9.9039120
Dec 2018      86.250117   39.42846  133.0717789   14.642566  157.8576692
Jan 2019     -39.703184  -91.17098   11.7646119 -118.416386   39.0100173
Feb 2019      -3.576237  -55.76644   48.6139688  -83.394269   76.2417950
Mar 2019      68.303825   16.10451  120.5031387  -11.528137  148.1357863
Apr 2019     124.060329   71.81099  176.3096671   44.151863  203.9687958
May 2019      83.891015   31.61840  136.1636307    3.946949  163.8350818
Jun 2019     -43.258206  -95.54912    9.0327042 -123.230251   36.7138398
Jul 2019     122.619189   70.31597  174.9224049   42.628323  202.6100550
Aug 2019     -22.483536  -74.79540   29.8283253 -102.487623   57.5205518
Sep 2019    -207.569128 -259.88699 -155.2512673 -287.582391 -127.5558648
Oct 2019     -58.640556 -110.96260   -6.3185177 -138.660209   21.3790965
Nov 2019     -61.700139 -114.02508   -9.3751930 -141.724237   18.3239600
Dec 2019      86.250154   33.92319  138.5771231    6.222962  166.2773471
#

#Applying plotly
p <- plot_ly() %>%
+     add_lines(x = time(detrending), y = detrending,
+               color = I("black"), name = "observed") %>%
+     add_ribbons(x = time(forecast_data$mean), ymin = forecast_data$lower[, 2], ymax = forecast_data$upper[, 2],
+                 color = I("gray95"), name = "95% confidence") %>%
+     add_ribbons(x = time(forecast_data$mean), ymin = forecast_data$lower[, 1], ymax = forecast_data$upper[, 1],
+                 color = I("gray80"), name = "80% confidence") %>%
+     add_lines(x = time(forecast_data$mean), y = forecast_data$mean, color = I("blue"), name = "prediction")

p	#plot the forecasting model

forecast_data$method
#[1] "ARIMA(2,0,1)(0,1,0)[12]"#Forecasts from ARIMA(2,0,1)(0,1,0)

